set nocompatible
syntax on
set nowrap
set encoding=utf8

" Automatically installs plug if it isn't available and installs declared plugins
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" Utilities
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

if !has('nvim')
  Plug 'tpope/vim-sensible'
endif

" Plug 'editorconfig/editorconfig-vim'

" Git support
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/gv.vim'

" Fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Better search via Ack
Plug 'mileszs/ack.vim'

" Autocompletion
Plug 'Shougo/neocomplete'

" Language-specific support
Plug 'tpope/vim-rails'
Plug 'kchmck/vim-coffee-script'
Plug 'slim-template/vim-slim'
Plug 'elixir-editors/vim-elixir'

" Vimwiki
Plug 'vimwiki/vimwiki'

" Powerline
Plug 'itchyny/lightline.vim'
set noshowmode

" Theme
let g:sonokai_style = 'shusia'
Plug 'sainnhe/sonokai'

" Which-key
Plug 'liuchengxu/vim-which-key'

call plug#end()

filetype plugin indent on

" Regular vim configuration starts here
set history=1000
set undolevels=1000

" Set the terminal title at will
set title

" Automatically update files when they've been changed externally
set autoread

" A better leader key
let mapleader = " "
let g:mapleader = " "

" Backspace
set backspace=indent,eol,start

" Fast saving
nmap <leader>w :w!<cr>

" 7 Lines to the cursor
set so=10

" Always show where I am in a buffer
set ruler
set relativenumber
set cursorline

" Height of the command bar
set cmdheight=1

" Hide a buffer when it is abandoned
set hid

" Mouse support
if has('mouse')
	set mouse=a
endif

" Ignore case when searching
set ignorecase
set smartcase

" Highlight search results
set hlsearch

" Show matching brackets
set showmatch
set mat=2

" No sounds on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Colors, fonts
if (has("termguicolors"))
  set termguicolors
endif

set background=dark
colorscheme sonokai

set t_ut=

" Why use vim backup when git exists
set nobackup
set nowb
set noswapfile

" Tabs and indentation

" Use spaces, because tabs are evil
set expandtab
set smarttab
set shiftwidth=2
set tabstop=2

" line break on excessive lines
set lbr
set tw=500

" Map <Space> to / (search)
" map <Space> /

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Tab management
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext

" Toggle paste on and off
map <leader>pp :setlocal paste!<cr>

" Always show the status line
set laststatus=2

" Plugin mappings
map <C-n> :NERDTreeToggle<CR>
map <C-t> :Files<CR>

" Commit messages should always wrap at 72 chars
autocmd Filetype gitcommit setlocal spell textwidth=72

" EditorConfig options to deal with fugitive support
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" FZF configuration
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_layout = { 'down': '~40%' }
let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
let g:fzf_history_dir = '~/.local/share/fzf-history'

" Lightline configuration
let g:lightline = {
  \ 'colorscheme': 'darcula',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'FugitiveHead'
  \ },
  \ }

" VimWiki configuration
let g:vimwiki_list = [
  \ {'path': '~/sync/brain/brain/',
  \   'syntax': 'markdown', 'ext': '.md'
  \ }]
